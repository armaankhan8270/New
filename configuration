from flask import Flask, render_template, request, redirect, url_for, jsonify
import json
import os

app = Flask(__name__)

CONFIG_FILE = 'config.json'


def load_configurations():
    if os.path.exists(CONFIG_FILE):
        with open(CONFIG_FILE, 'r') as f:
            return json.load(f)
    return []


def save_configurations(configs):
    with open(CONFIG_FILE, 'w') as f:
        json.dump(configs, f, indent=4)


@app.route('/')
def index():
    configs = load_configurations()
    return render_template('index.html', configs=configs)


@app.route('/add', methods=['POST'])
def add_config():
    new_config = request.get_json()
    configs = load_configurations()
    configs.append(new_config)
    save_configurations(configs)
    return jsonify({"message": "Configuration added successfully"}), 200


@app.route('/delete/<int:config_id>', methods=['POST'])
def delete_config(config_id):
    configs = load_configurations()
    configs.pop(config_id)
    save_configurations(configs)
    return jsonify({"message": "Configuration deleted successfully"}), 200


@app.route('/edit/<int:config_id>', methods=['POST'])
def edit_config(config_id):
    updated_config = request.get_json()
    configs = load_configurations()
    configs[config_id] = updated_config
    save_configurations(configs)
    return jsonify({"message": "Configuration updated successfully"}), 200


@app.route('/view/<int:config_id>')
def view_config(config_id):
    configs = load_configurations()
    return jsonify(configs[config_id]), 200


if __name__ == '__main__':
    app.run(debug=True)
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Configuration Manager</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100">

  <div class="container mx-auto p-8">
    <h1 class="text-2xl font-bold mb-6">Configuration Manager</h1>

    <!-- Button to open the modal -->
    <button onclick="openModal()" class="bg-blue-500 text-white px-4 py-2 rounded">Add Configuration</button>

    <!-- Configuration Table -->
    <div class="mt-6">
      <table class="min-w-full bg-white rounded-md shadow">
        <thead>
          <tr>
            <th class="py-3 px-6 bg-gray-200 text-left">Configuration Name</th>
            <th class="py-3 px-6 bg-gray-200 text-left">Actions</th>
          </tr>
        </thead>
        <tbody id="config-table">
          {% for config in configs %}
          <tr class="border-t">
            <td class="py-3 px-6">{{ config.name }}</td>
            <td class="py-3 px-6">
              <button class="bg-yellow-500 text-white px-3 py-1 rounded" onclick="viewConfig({{ loop.index0 }})">View</button>
              <button class="bg-green-500 text-white px-3 py-1 rounded" onclick="editConfig({{ loop.index0 }})">Edit</button>
              <button class="bg-red-500 text-white px-3 py-1 rounded" onclick="deleteConfig({{ loop.index0 }})">Delete</button>
            </td>
          </tr>
          {% endfor %}
        </tbody>
      </table>
    </div>
  </div>

  <!-- Modal for Adding New Configuration -->
  <div id="modal" class="fixed z-10 inset-0 overflow-y-auto hidden">
    <div class="flex items-center justify-center min-h-screen">
      <div class="bg-white p-8 rounded-lg shadow-lg w-1/2">
        <h2 class="text-xl font-semibold mb-4">Add Configuration</h2>

        <form id="config-form">
          <div class="mb-4">
            <label class="block text-gray-700">Configuration Name:</label>
            <input type="text" id="config-name" class="w-full px-4 py-2 border rounded" required>
          </div>

          <div class="mb-4">
            <h3 class="font-semibold mb-2">Columns:</h3>
            <div id="columns-container">
              <!-- Column fields will be dynamically added here -->
            </div>
            <button type="button" onclick="addColumn()" class="bg-blue-500 text-white px-4 py-2 rounded mt-2">Add Column</button>
          </div>

          <button type="submit" class="bg-green-500 text-white px-4 py-2 rounded">Submit</button>
          <button type="button" onclick="closeModal()" class="bg-gray-500 text-white px-4 py-2 rounded ml-2">Cancel</button>
        </form>
      </div>
    </div>
  </div>

  <script>
    let columnCount = 0;

    function openModal() {
      document.getElementById('modal').classList.remove('hidden');
    }

    function closeModal() {
      document.getElementById('modal').classList.add('hidden');
    }

    function addColumn() {
      columnCount++;
      const container = document.getElementById('columns-container');
      const fieldset = document.createElement('div');
      fieldset.className = "mb-4";

      fieldset.innerHTML = `
        <label class="block text-gray-700">Column Name:</label>
        <input type="text" class="w-full px-4 py-2 border rounded mb-2" required>
        
        <label class="block text-gray-700">Data Type:</label>
        <select class="w-full px-4 py-2 border rounded">
          <option>String</option>
          <option>Integer</option>
          <option>Float</option>
          <option>Boolean</option>
        </select>

        <label class="block text-gray-700 mt-2">Other Details (Optional):</label>
        <input type="text" class="w-full px-4 py-2 border rounded">
      `;
      container.appendChild(fieldset);
    }

    document.getElementById('config-form').addEventListener('submit', function(e) {
      e.preventDefault();
      const configName = document.getElementById('config-name').value;
      const columns = [...document.getElementById('columns-container').children].map(fieldset => ({
        name: fieldset.querySelector('input[type="text"]').value,
        type: fieldset.querySelector('select').value,
        details: fieldset.querySelectorAll('input[type="text"]')[1].value || null
      }));

      const newConfig = { name: configName, columns };
      
      fetch('/add', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(newConfig)
      }).then(response => {
        if (response.ok) {
          window.location.reload();
        }
      });
    });

    function deleteConfig(configId) {
      fetch(`/delete/${configId}`, {
        method: 'POST'
      }).then(response => {
        if (response.ok) {
          window.location.reload();
        }
      });
    }

    function editConfig(configId) {
      // Implement edit functionality
    }

    function viewConfig(configId) {
      // Implement view functionality
    }
  </script>

</body>
</html>
function editConfig(configId) {
    fetch(`/view/${configId}`)
        .then(response => response.json())
        .then(config => {
            // Open the modal
            openModal();

            // Populate modal fields with existing config data
            document.getElementById('config-name').value = config.name;
            document.getElementById('columns-container').innerHTML = '';

            config.columns.forEach((column, index) => {
                addColumn();
                const fieldset = document.getElementById('columns-container').children[index];
                fieldset.querySelector('input[type="text"]').value = column.name;
                fieldset.querySelector('select').value = column.type;
                if (column.details) {
                    fieldset.querySelectorAll('input[type="text"]')[1].value = column.details;
                }
            });

            // Change form submission to update
            document.getElementById('config-form').onsubmit = function (e) {
                e.preventDefault();
                const updatedName = document.getElementById('config-name').value;
                const updatedColumns = [...document.getElementById('columns-container').children].map(fieldset => ({
                    name: fieldset.querySelector('input[type="text"]').value,
                    type: fieldset.querySelector('select').value,
                    details: fieldset.querySelectorAll('input[type="text"]')[1].value || null
                }));

                const updatedConfig = { name: updatedName, columns: updatedColumns };

                fetch(`/edit/${configId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(updatedConfig)
                }).then(response => {
                    if (response.ok) {
                        window.location.reload();
                    }
                });
            };
        });
}

function viewConfig(configId) {
    fetch(`/view/${configId}`)
        .then(response => response.json())
        .then(config => {
            let configDetails = `Configuration Name: ${config.name}\nColumns:\n`;

            config.columns.forEach(column => {
                configDetails += `- Name: ${column.name}, Type: ${column.type}, Details: ${column.details || 'N/A'}\n`;
            });

            alert(configDetails);
        });
}
